package rdf

type Variable struct {
	id string
}

func (v Variable) validAsSubject()   {}
func (v Variable) validAsPredicate() {}
func (v Variable) validAsObj()       {}

type subject interface {
	validAsSubject()
}

type predicate interface {
	validAsPredicate()
}

type object interface {
	validAsObject()
}

type TriplePattern struct {
	Subj subject
	Pred predicate
	Obj  object
}

// A Graph is a collection of triples. It can be queried for derivate
// graphs and updated with Triple inserts and deletes.
type Graph interface {

	// Size returns the number of triples in the graph.
	Size() (int, error)

	// Each executes a function for each triple in the graph. If the
	// provided function returns an error then the iteration is stopped
	// and the error is returned to the caller.
	Each(func(Triple) error) error

	// Construct constructs a new graph using the given ConstructQuery.
	Construct(*ConstructQuery) (Graph, error)

	// Update performs the given UpdateQuery against the graph; mutating
	// the graph by inserting and/or deleting triples.
	Update(*UpdateQuery) error
}

// Convenience functions utilising Graph interface methods:

func HasTriple(g Graph, tr Triple) (bool, error) {
	res, _ := g.Construct(
		NewConstructQuery().Construct(tr))
	return res.Size() == 1
}

func InsertInto(g Graph, trs ...TriplePattern) error {
	return g.Update(
		NewUpdateQuery().Insert(trs...))
}

func DeleteFrom(g Graph, trs ...TriplePattern) error {
	return g.Update(
		NewUpdateQuery().Delete(trs...))
}

func TriplesIn(g Graph) (trs []Triple, err error) {
	err = g.Each(func(tr Triple) (err2 error) {
		trs = append(trs, tr)
		return err2
	})

	return trs, err
}

// func EqGraphs(g, other Graph) bool {}
// func Union(g, other Graph) (Graph, error)                       {}
// func Merge(g, other Graph) error                          {}
// func Describe(g Graph, resource URI, levels int) (Graph, error) {}

type UpdateQuery struct {
	InsTriples []TriplePattern
	DelTriples []TriplePattern
	Where      []TriplePattern
}

func NewUpdateQuery() *UpdateQuery {
	return &UpdateQuery{}
}

func (q *UpdateQuery) Insert(trs ...TriplePattern) *UpdateQuery {
	q.InsTriples = append(q.InsTriples, trs...)
	return q
}

func (q *UpdateQuery) Delete(trs ...TriplePattern) *UpdateQuery {
	q.DelTriples = append(q.DelTriples, trs...)
	return q
}

type ConstructQuery struct {
	Construct []TriplePattern
	Where     []TriplePattern
}

func NewConstructQuery() *ConstructQuery {
	return &ConstructQuery{}
}
